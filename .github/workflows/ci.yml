name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, redis
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Copy environment file
      run: cp .env.example .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Install PHP dependencies
      run: composer install --prefer-dist --no-interaction

    - name: Install Node.js dependencies
      run: npm ci

    - name: Build frontend assets
      run: npm run build

    - name: Create database
      run: |
        mkdir -p database
        touch database/database.sqlite

    - name: Run database migrations
      run: php artisan migrate --env=testing --force

    - name: Run PHP Code Style Check
      run: vendor/bin/pint --test

    - name: Run PHP Static Analysis
      run: vendor/bin/phpstan analyse --memory-limit=2G

    - name: Run PHPUnit tests
      run: php artisan test --parallel

    - name: Run production build test
      run: |
        npm ci
        npm run build
        npm prune --production

    - name: Check for security vulnerabilities
      run: composer audit --format=json --no-interaction

    - name: Validate composer.json
      run: composer validate --strict

    - name: Check for outdated dependencies
      run: composer outdated --direct --format=json

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Node.js dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run TypeScript check
      run: npx tsc --noEmit

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite

    - name: Install PHP dependencies
      run: composer install --prefer-dist --no-interaction

    - name: Run security audit
      run: composer audit --format=json --no-interaction

    - name: Check for exposed secrets
      run: |
        if grep -r "password\|secret\|key" . --exclude-dir=vendor --exclude-dir=node_modules --exclude=.git | grep -v "example\|test\|mock"; then
          echo "⚠️  Potential secrets found in code"
          exit 1
        fi

  production-readiness:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, redis

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-interaction
        npm ci

    - name: Copy environment file
      run: cp .env.example .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Run production build
      run: npm run build

    - name: Run production report
      run: php artisan prod:report --format=md

    - name: Check production readiness
      run: |
        if php artisan prod:report --format=md | grep -q "❌ FAIL"; then
          echo "❌ Production readiness check failed"
          php artisan prod:report --format=md
          exit 1
        fi
        echo "✅ Production readiness check passed"
